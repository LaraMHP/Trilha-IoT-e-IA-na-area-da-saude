#define BLYNK_TEMPLATE_ID "TMPL2xiwvMV3J"
#define BLYNK_TEMPLATE_NAME "Trilha IoT e IA na área da saúde"
#define BLYNK_AUTH_TOKEN "xtJFA0UlEtpSY7uy9xfh7IFHuAYF2Pwg"

#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <DHT.h>
#include <math.h>

// === Credenciais WiFi ===
char ssid[] = "Convidado iot";
char pass[] = "mescla@1417";
char auth[] = BLYNK_AUTH_TOKEN;

// === Pinos ===
#define DHT_SENSOR_PIN 4
#define DHT_SENSOR_TYPE DHT11
#define LDR_PIN 34
#define SOM_PIN 35
#define LED_GREEN 22    // Temperatura
#define LED_RED 23      // Som
#define LED_YELLOW 19   // Luz
#define LED_WHITE 11  // Umidade

// === Limiares ===
#define TEMP_LIMITE_MIN 20
#define TEMP_LIMITE_MAX 28
#define LDR_LIMITE 3000
#define SOM_LIMITE_DB 80
#define UMIDADE_LIMITE_MIN 40
#define UMIDADE_LIMITE_MAX 70

// === Objetos ===
DHT dht(DHT_SENSOR_PIN, DHT_SENSOR_TYPE);
BlynkTimer timer;

// Variáveis para controle de envio de alertas (para não repetir)
bool alertaTempEnviado = false;
bool alertaLuzEnviado = false;
bool alertaSomEnviado = false;
bool alertaUmidadeEnviado = false;

void setup() {
  Serial.begin(9600);
  dht.begin();

  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_RED, OUTPUT);
  pinMode(LED_YELLOW, OUTPUT);
  pinMode(LED_WHITE, OUTPUT);

  Blynk.begin(auth, ssid, pass);
  timer.setInterval(1000L, lerSensores);
}

void loop() {
  Blynk.run();
  timer.run();
}

void lerSensores() {
  float temperatura = dht.readTemperature();
  float umidade = dht.readHumidity();
  int ldrValue = analogRead(LDR_PIN);
  int somValue = analogRead(SOM_PIN);
  float tensaoSom = somValue * (3.3 / 4095.0);
  float decibeis = (tensaoSom > 0.01) ? 20 * log10(tensaoSom / 0.00631) : 0;

  // Envio para Blynk
  Blynk.virtualWrite(V1, temperatura);
  Blynk.virtualWrite(V2, ldrValue);
  Blynk.virtualWrite(V6, decibeis);
  Blynk.virtualWrite(V7, umidade);

  // === Temperatura ===
  bool alertaTemp = (temperatura < TEMP_LIMITE_MIN) || (temperatura > TEMP_LIMITE_MAX);
  digitalWrite(LED_GREEN, alertaTemp ? HIGH : LOW);
  Blynk.virtualWrite(V4, alertaTemp ? 1 : 0);
  if (alertaTemp && !alertaTempEnviado) {
    Blynk.logEvent("temperatura", "Temperatura fora do limite ideal!");
    alertaTempEnviado = true;
  }
  if (!alertaTemp) {
    alertaTempEnviado = false;
  }

  // === Luz ===
  bool alertaLuz = ldrValue >= LDR_LIMITE;
  digitalWrite(LED_YELLOW, alertaLuz ? HIGH : LOW);
  Blynk.virtualWrite(V5, alertaLuz ? 255 : 0);
  if (alertaLuz && !alertaLuzEnviado) {
    Blynk.logEvent("iluminosidade", "Iluminação acima do limite!");
    alertaLuzEnviado = true;
  }
  if (!alertaLuz) {
    alertaLuzEnviado = false;
  }

  // === Som ===
  bool alertaSom = decibeis >= SOM_LIMITE_DB;
  digitalWrite(LED_RED, alertaSom ? HIGH : LOW);
  Blynk.virtualWrite(V3, alertaSom ? 1 : 0);
  if (alertaSom && !alertaSomEnviado) {
    Blynk.logEvent("som", "Nível de ruído acima do limite!");
    alertaSomEnviado = true;
  }
  if (!alertaSom) {
    alertaSomEnviado = false;
  }

  // === Umidade ===
  bool alertaUmidade = (umidade < UMIDADE_LIMITE_MIN) || (umidade > UMIDADE_LIMITE_MAX);
  digitalWrite(LED_WHITE, alertaUmidade ? HIGH : LOW);
  Blynk.virtualWrite(V8, alertaUmidade ? 1 : 0);
  if (alertaUmidade && !alertaUmidadeEnviado) {
    Blynk.logEvent("umidade", "Umidade fora do intervalo ideal!");
    alertaUmidadeEnviado = true;
  }
  if (!alertaUmidade) {
    alertaUmidadeEnviado = false;
  }

  // Monitor serial
  Serial.print("Temp: "); Serial.print(temperatura);
  Serial.print(" °C | Umid: "); Serial.print(umidade);
  Serial.print(" % | LDR: "); Serial.print(ldrValue);
  Serial.print(" | Som: "); Serial.print(somValue);
  Serial.print(" | dB: "); Serial.println(decibeis);
}
